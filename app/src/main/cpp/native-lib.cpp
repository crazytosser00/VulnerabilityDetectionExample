#include <stdio.h>
#include <jni.h>
#include <string.h>
#include <fcntl.h>
#include <pthread.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <android/log.h>
#include <unistd.h>
#include <errno.h>

#define APPNAME "FridaDetectionTest"
#define MAX_LINE 512

JavaVM *java_machine;
JNIEnv *stored_env;
jobject stored_object;
jclass globalAppRef;
jmethodID javamethod;

void *detect_frida_loop(void *) {

    struct sockaddr_in sa;
    memset(&sa, 0, sizeof(sa));
    sa.sin_family = AF_INET;
    inet_aton("127.0.0.1", &(sa.sin_addr));

    int sock;

    int fd;
    char map[MAX_LINE];
    char res[7];
    int num_found;
    int ret;
    int i;

    int frida_flag = 0;
    while (frida_flag != 1) {

        /*
         * 1: Frida Server Detection.
         */

        __android_log_print(ANDROID_LOG_VERBOSE, APPNAME, "TRY TO CHECK PORTS");

        for (i = 0; i <= 65535; i++) {

            sock = socket(AF_INET, SOCK_STREAM, 0);
            sa.sin_port = htons(i);

            if (connect(sock, (struct sockaddr *) &sa, sizeof sa) != -1) {
                memset(res, 0, 7);

                send(sock, "\x00", 1, NULL);
                send(sock, "AUTH\r\n", 6, NULL);

                usleep(100); // Give it some time to answer

                if ((ret = recv(sock, res, 6, MSG_DONTWAIT)) != -1) {
                    if (strcmp(res, "REJECT") == 0) {
                        java_machine->AttachCurrentThread(&stored_env, nullptr);
                        stored_env->CallStaticVoidMethod(globalAppRef, javamethod);
                        frida_flag = 1;

                        __android_log_print(ANDROID_LOG_VERBOSE, APPNAME,
                                            "FRIDA DETECTED - frida server running on port %d!", i);
                    }
                }
            }

            close(sock);

            if (i == 10000) {
                __android_log_print(ANDROID_LOG_VERBOSE, APPNAME, "port 10000 checked");
            }
            if (i == 20000) {
                __android_log_print(ANDROID_LOG_VERBOSE, APPNAME, "port 20000 checked");
            }
            if (i == 30000) {
                __android_log_print(ANDROID_LOG_VERBOSE, APPNAME, "port 30000 checked");
            }
            if (i == 40000) {
                __android_log_print(ANDROID_LOG_VERBOSE, APPNAME, "port 40000 checked");
            }
            if (i == 50000) {
                __android_log_print(ANDROID_LOG_VERBOSE, APPNAME, "port 50000 checked");
            }
            if (i == 60000) {
                __android_log_print(ANDROID_LOG_VERBOSE, APPNAME, "port 60000 checked");
            }
        }

        if (frida_flag != 1) {
            sleep(1);
        }
    }
    java_machine->DetachCurrentThread();
}

extern "C"
JNIEXPORT jint JNICALL JNI_OnLoad(JavaVM *vm, void *reserved) {
    __android_log_print(ANDROID_LOG_VERBOSE, APPNAME, "JNI ON LOAD");
    java_machine = vm;
    return JNI_VERSION_1_6;
}

/*
 * public native void init();
 */

extern "C"
JNIEXPORT void JNICALL Java_com_itlavka_hazeltree_App_init(JNIEnv *env, jobject thisObj) {

    __android_log_print(ANDROID_LOG_VERBOSE, APPNAME, "init lib");

    stored_env = env;
    stored_object = thisObj;

    jclass localObjectRef = env->FindClass("com/roansa/vulnerabilitydetectionexample/App");
    globalAppRef = (jclass) env->NewGlobalRef(localObjectRef);
    javamethod = stored_env->GetStaticMethodID(globalAppRef, "detectFrida", "()V");

    __android_log_print(ANDROID_LOG_VERBOSE, APPNAME, "set values");

    pthread_t t;

    pthread_create(&t, NULL, detect_frida_loop, (void *) NULL);
}

// Used by syscall.S
extern "C" long __set_errno_internal(int n) {
    errno = n;
    return -1;
}
